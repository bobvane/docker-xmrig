name: Check XMRig Release and Trigger Build

on:
  schedule:
    - cron: '0 0 1 * *'  # 每月 1 日凌晨 00:00 UTC
  workflow_dispatch:      # 允许手动触发

jobs:
  check-xmrig-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 推送 Dockerfile 更改
      actions: write   # 触发其他工作流
    outputs:
      version: ${{ steps.check-release.outputs.version }}
      should_build: ${{ steps.check-release.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # 确保使用 GITHUB_TOKEN

      - name: Check latest XMRig release
        id: check-release
        run: |
          # 使用 GitHub API 获取 xmrig/xmrig 最新 Release
          RELEASE_INFO=$(curl -s https://api.github.com/repos/xmrig/xmrig/releases/latest)
          
          # 提取版本号和预发布状态
          VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          PRERELEASE=$(echo "$RELEASE_INFO" | jq -r '.prerelease')
          
          # 检查是否为正式版本
          if [ "$PRERELEASE" = "false" ]; then
            echo "Found new non-prerelease version: $VERSION"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "Latest release ($VERSION) is a prerelease, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
          
          # 保存版本号到输出
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Debug Dockerfile before update
        if: steps.check-release.outputs.should_build == 'true'
        run: |
          echo "Current Dockerfile content:"
          cat Dockerfile

      - name: Update Dockerfile with new XMRig version
        if: steps.check-release.outputs.should_build == 'true'
        run: |
          VERSION=${{ steps.check-release.outputs.version }}
          # 替换 XMRIG_VERSION
          if grep -q "ARG XMRIG_VERSION=" Dockerfile; then
            sed -i "s|ARG XMRIG_VERSION=.*|ARG XMRIG_VERSION=$VERSION|" Dockerfile
            echo "Updated XMRIG_VERSION to $VERSION"
          else
            echo "Error: ARG XMRIG_VERSION not found in Dockerfile"
            exit 1
          fi

          # 检查修改结果
          echo "Changes in Dockerfile:"
          git diff || true

      - name: Commit and push Dockerfile changes
        if: steps.check-release.outputs.should_build == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Dockerfile
          # 检查是否有更改需要提交
          if git diff --staged --quiet; then
            echo "No changes in Dockerfile, skipping commit"
          else
            git commit -m "Update XMRig and CUDA plugin to ${{ steps.check-release.outputs.version }}"
            git push
          fi

      - name: Trigger Docker build workflow
        if: steps.check-release.outputs.should_build == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            (async () => {
              // 把步骤输出先放到一个 JS 字符串变量里
              const version = "${{ steps.check-release.outputs.version }}";
              console.log(`Triggering docker-build.yaml with xmrig_version=${version}`);

              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: "docker-build.yaml",
                ref: "master",
                inputs: { xmrig_version: version }
              });
            })();
